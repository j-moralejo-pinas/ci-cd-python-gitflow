name: Update Changelog
description: Slice changelog between releases and update CHANGELOG.rst

inputs:
  token:
    description: 'GitHub PAT token for API access'
    required: true
  changelog_path:
    description: 'Path to the changelog file'
    required: false
    default: 'CHANGELOG.rst'

outputs:
  did_push:
    description: 'Whether changes were pushed to the repository'
    value: ${{ steps.commit_push.outputs.did_push || 'false' }}

runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true

    # Detect branch type and current PR number (if available)
    - name: Detect branch type and PR number
      id: meta
      shell: bash
      env:
        PR_NUMBER: ${{ github.event.pull_request.number }}
      run: |
        BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
        echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
        if [[ "$BRANCH" == hotfix/* ]]; then
          echo "is_hotfix=true" >> "$GITHUB_OUTPUT"
        else
          echo "is_hotfix=false" >> "$GITHUB_OUTPUT"
        fi
        if [[ "$BRANCH" == meta/* ]]; then
          echo "is_meta=true" >> "$GITHUB_OUTPUT"
        else
          echo "is_meta=false" >> "$GITHUB_OUTPUT"
        fi
        echo "pr_number=${PR_NUMBER}" >> "$GITHUB_OUTPUT"

    # Compute the new version as the first step
    - name: Compute new version
      id: semver
      if: ${{ steps.meta.outputs.is_meta != 'true' }}
      uses: j-moralejo-pinas/ci-cd-python-gitflow/.github/actions/find-next-semver@main

    # Detect last version present in CHANGELOG.rst (first header starting with '## vX.Y.Z - YYYY-MM-DD')
    - name: Determine last CHANGELOG version
      id: changelog_last
      if: ${{ steps.meta.outputs.is_meta != 'true' }}
      uses: ./.github/actions/get-last-changelog-version
      with:
        changelog_path: ${{ inputs.changelog_path }}

    # Compare versions (semantic): result only if new_tag > last_tag
    - name: Check if new version is above last changelog version
      id: should_run
      if: ${{ steps.meta.outputs.is_meta != 'true' }}
      uses: j-moralejo-pinas/ci-cd-python-gitflow/.github/actions/compare-versions@main
      with:
        new_tag: ${{ steps.semver.outputs.new_tag }}
        last_tag: ${{ steps.changelog_last.outputs.last_tag }}

    - name: Find previous release cut
      id: previous_cut
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' }}
      uses: ./.github/actions/find-previous-release-cut
      with:
        dev_branch: dev
        main_branch: main

    - name: Find current release cut
      id: current_cut
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' }}
      uses: ./.github/actions/find-current-release-cut
      with:
        dev_branch: dev

    - name: Find PRs on dev between cuts
      id: prs
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' && steps.meta.outputs.is_hotfix != 'true' }}
      uses: j-moralejo-pinas/ci-cd-python-gitflow/.github/actions/find-prs-between-cuts@main
      with:
        token: ${{ inputs.token }}
        repo: ${{ github.repository }}
        dev_branch: dev
        prev_cut: ${{ steps.previous_cut.outputs.prev_cut }}
        cur_cut: ${{ steps.current_cut.outputs.cur_cut }}

    # Prepare PR list for changelog depending on branch type
    - name: Prepare PR list for changelog
      id: prs_input
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' }}
      shell: bash
      run: |
        if [[ "${{ steps.meta.outputs.is_hotfix }}" == "true" ]]; then
          echo "numbers=${{ steps.meta.outputs.pr_number }}" >> "$GITHUB_OUTPUT"
        else
          echo "numbers=${{ steps.prs.outputs.numbers }}" >> "$GITHUB_OUTPUT"
        fi

    - name: Build and prepend changelog slice
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' }}
      uses: j-moralejo-pinas/ci-cd-python-gitflow/.github/actions/update-changelog-slice@main
      with:
        token: ${{ inputs.token }}
        prs: ${{ steps.prs_input.outputs.numbers }}
        version: ${{ steps.semver.outputs.new_tag }}
        changelog_path: ${{ inputs.changelog_path }}

    - name: Commit and push changelog
      id: commit_push
      uses: j-moralejo-pinas/ci-cd-python-gitflow/.github/actions/commit-push@main
      with:
        pat: ${{ inputs.token }}
        message: "chore: update changelog for ${{ steps.semver.outputs.new_tag }}"
        labels: changelog
      if: ${{ steps.meta.outputs.is_meta != 'true' && steps.should_run.outputs.result == 'true' }}